<!-- Optimized Holi Gulal Effect with Smaller Bubbles -->
<style>
    .holi-container {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        width: 100vw !important; /* Using vw instead of % */
        height: 100vh !important; /* Using vh instead of % */
        pointer-events: none !important;
        z-index: 99999 !important;
        overflow: hidden !important; /* Prevent overflow */
        min-height: 1px !important;
        max-width: 100% !important; /* Prevent horizontal overflow */
    }
    .holi-container:after {
        content: "" !important;
        display: block !important;
        width: 1px !important;
        height: 1px !important;
        opacity: 0.01 !important;
    }
    .gulal-particle {
        position: absolute !important;
        border-radius: 50% !important;
        opacity: 0.9 !important;
        transform-origin: center center !important;
        transition: transform 1.5s cubic-bezier(0.21, 0.98, 0.6, 0.99), 
                    opacity 1.5s cubic-bezier(0.21, 0.98, 0.6, 0.99) !important;
        pointer-events: none !important;
        filter: blur(1px) !important;
        will-change: transform, opacity !important; /* Performance hint */
    }
    .gulal-powder {
        position: absolute !important;
        border-radius: 50% !important;
        opacity: 0.6 !important;
        transition: transform 2s cubic-bezier(0.21, 0.98, 0.6, 0.99),
                    opacity 2s cubic-bezier(0.21, 0.98, 0.6, 0.99) !important;
        pointer-events: none !important;
        filter: blur(3px) !important;
        mix-blend-mode: screen !important;
        will-change: transform, opacity !important; /* Performance hint */
    }
</style>

<script defer>
    window.addEventListener('load', function() {
        // Performance settings - reduced numbers
        var isMobile = window.innerWidth < 768;
        var maxParticles = isMobile ? 30 : 60;     // Reduced max particles
        var maxClouds = isMobile ? 3 : 8;          // Reduced max clouds
        var currentParticles = 0;
        var currentClouds = 0;
        
        // Frequency settings - increased times
        var burstFrequency = isMobile ? 6000 : 5000;  // Less frequent bursts
        var particlesPerBurst = isMobile ? 10 : 15;   // Fewer particles per burst
        
        // Viewport bounds to prevent overflow
        var viewportWidth = window.innerWidth;
        var viewportHeight = window.innerHeight;
        var safeMargin = 20; // Keep particles away from edges
        
        // Create container (with empty content preventer)
        var holiContainer = document.createElement('div');
        holiContainer.className = 'holi-container';
        holiContainer.innerHTML = '&nbsp;';
        document.body.appendChild(holiContainer);

        // Optimized color array - pre-computed
        var holiColors = [
            '#FF5F5F','#FF9933','#FFEA00','#7CFC00','#00BFFF','#9370DB','#FF69B4',
            '#FF1493','#FF00FF','#00FFFF','#ADFF2F','#FF4500','#FF7F50','#B19CD9',
            '#FF0080','#7DF9FF','#DFFF00','#FD5DA8','#1ABC9C','#F39C12','#C39BD3',
            '#FF6D61','#01F9C6','#F1C40F'
        ];
        
        // Scroll tracking
        var lastScrollTop = 0;
        var isScrolling = false;
        var scrollTimeout = null;

        // Create a single particle efficiently
        function createParticle(x, y, color, size, speed) {
            // Limit total particles
            if (currentParticles >= maxParticles) return;
            currentParticles++;
            
            // Ensure particle starts within viewport bounds
            x = Math.max(safeMargin, Math.min(x, viewportWidth - safeMargin));
            
            // Mobile size adjustment
            size = isMobile ? size * 0.4 : size;
            
            var particle = document.createElement('div');
            particle.className = 'gulal-particle';
            particle.style.width = size + 'px';
            particle.style.height = size + 'px';
            particle.style.backgroundColor = color;
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            particle.innerHTML = '&nbsp;';
            
            holiContainer.appendChild(particle);
            
            // Use requestAnimationFrame for better performance
            requestAnimationFrame(function() {
                // Keep animation within viewport bounds
                var angle = Math.random() * Math.PI * 2;
                var distance = Math.min(40 + Math.random() * 60, 
                                      isMobile ? viewportWidth/4 : viewportWidth/3);
                var destX = Math.cos(angle) * distance;
                var destY = Math.sin(angle) * distance - (Math.random() * 50);
                
                // Ensure final position stays within bounds
                if (x + destX < safeMargin || x + destX > viewportWidth - safeMargin) {
                    destX = -destX; // Reverse direction if it would go out of bounds
                }
                
                particle.style.transform = 'translate(' + destX + 'px, ' + destY + 'px) scale(' + (0.5 + Math.random() * 0.5) + ')';
                particle.style.opacity = '0';
            });
            
            // Clean up after animation
            setTimeout(function() {
                if (particle.parentNode) {
                    holiContainer.removeChild(particle);
                    currentParticles--;
                }
            }, speed * 1000);
        }

        // Create a powder cloud efficiently - REDUCED SIZES HERE
        function createPowderCloud(x, y, color) {
            if (currentClouds >= maxClouds) return;
            currentClouds++;
            
            // Ensure cloud starts within viewport bounds
            x = Math.max(safeMargin, Math.min(x, viewportWidth - safeMargin));
            
            // SMALLER sizes for both mobile and desktop (reduced by ~40%)
            var size = isMobile ? 
                (Math.floor(Math.random() * 18) + 12) : // Was 30+20, now 18+12
                (Math.floor(Math.random() * 30) + 20);  // Was 50+30, now 30+20
                
            // Adjust for position containment
            if (x < size/2) x = size/2 + safeMargin;
            if (x > viewportWidth - size/2) x = viewportWidth - size/2 - safeMargin;
            
            var cloud = document.createElement('div');
            cloud.className = 'gulal-powder';
            cloud.style.width = size + 'px';
            cloud.style.height = size + 'px';
            cloud.style.backgroundColor = color;
            cloud.style.left = (x - (size/2)) + 'px';
            cloud.style.top = (y - (size/2)) + 'px';
            cloud.innerHTML = '&nbsp;';
            
            holiContainer.appendChild(cloud);
            
            requestAnimationFrame(function() {
                // Keep animation within bounds
                var destX = (Math.random() - 0.5) * Math.min(60, viewportWidth/6);
                var destY = -40 - Math.random() * 30;
                
                // REDUCED scale factor for expansion (was 1.3+0.4, now 1.2+0.3)
                cloud.style.transform = 'translate(' + destX + 'px, ' + destY + 'px) scale(' + (1.2 + Math.random() * 0.3) + ')';
                cloud.style.opacity = '0';
            });
            
            setTimeout(function() {
                if (cloud.parentNode) {
                    holiContainer.removeChild(cloud);
                    currentClouds--;
                }
            }, 2000);
        }

        // Create a burst of particles
        function createBurst(x, y) {
            // Adjust position to stay within viewport
            x = Math.max(safeMargin, Math.min(x, viewportWidth - safeMargin));
            y = Math.max(safeMargin, Math.min(y, viewportHeight - safeMargin));
            
            var color = holiColors[Math.floor(Math.random() * holiColors.length)];
            createPowderCloud(x, y, color);
            
            // Adjusted particle count
            var count = isMobile ? 
                (Math.floor(Math.random() * 5) + 5) : 
                (Math.floor(Math.random() * 8) + particlesPerBurst/2);
            
            // Stagger particle creation to reduce CPU spikes
            for (var i = 0; i < count; i++) {
                // Add variation to position and color
                var offsetX = x + (Math.random() - 0.5) * 15;
                var offsetY = y + (Math.random() - 0.5) * 15;
                var size = Math.floor(Math.random() * 8) + 4;
                var speed = 1 + Math.random() * 0.5;
                
                // Only create some particles immediately, delay others
                if (i < count/2) {
                    createParticle(offsetX, offsetY, color, size, speed);
                } else {
                    setTimeout(function(oX, oY, c, s, sp) {
                        return function() { createParticle(oX, oY, c, s, sp); };
                    }(offsetX, offsetY, color, size, speed), 100 + i * 20);
                }
            }
        }

        // Ambient burst creation with performance throttling
        function scheduleRandomBurst() {
            // Check if browser tab is visible to save resources
            if (document.hidden) {
                setTimeout(scheduleRandomBurst, burstFrequency);
                return;
            }
            
            var x = Math.random() * (viewportWidth - 2*safeMargin) + safeMargin;
            var y = Math.random() * (viewportHeight/2) + viewportHeight/4;
            createBurst(x, y);
            
            setTimeout(scheduleRandomBurst, Math.random() * 2000 + burstFrequency);
        }

        // Efficient scroll handler
        function handleScroll() {
            if (isScrolling) return;
            isScrolling = true;
            
            var st = window.pageYOffset || document.documentElement.scrollTop;
            if (Math.abs(st - lastScrollTop) > 20) {
                var x = Math.random() * (viewportWidth - 2*safeMargin) + safeMargin;
                var y = Math.random() * (viewportHeight/2) + viewportHeight/4;
                createBurst(x, y);
                lastScrollTop = st;
            }
            
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(function() {
                isScrolling = false;
            }, 150);
        }

        // Event listeners with passive flag for better performance
        document.addEventListener('click', function(e) {
            if (!['INPUT', 'TEXTAREA', 'SELECT', 'BUTTON', 'A'].includes(e.target.tagName)) {
                createBurst(e.clientX, e.clientY);
            }
        }, {passive: true});
        
        window.addEventListener('scroll', handleScroll, {passive: true});
        
        document.addEventListener('touchmove', function(e) {
            if (e.touches.length > 0 && Math.random() > 0.85) {
                var touch = e.touches[0];
                createBurst(touch.clientX, touch.clientY);
            }
        }, {passive: true});
        
        // Update viewport dimensions on resize
        window.addEventListener('resize', function() {
            viewportWidth = window.innerWidth;
            viewportHeight = window.innerHeight;
            isMobile = viewportWidth < 768;
            maxParticles = isMobile ? 30 : 60;
            maxClouds = isMobile ? 3 : 8;
            burstFrequency = isMobile ? 6000 : 5000;
            particlesPerBurst = isMobile ? 10 : 15;
        }, {passive: true});
        
        // RESTORED: Initial bursts when page loads - increased to original count
        var initialBursts = isMobile ? 6 : 8; // Increased from previous 4
        
        // Create initial bursts in sequence
        function createInitialBursts(index) {
            if (index >= initialBursts) {
                // Start regular random bursts after initial sequence
                setTimeout(scheduleRandomBurst, 1000);
                return;
            }
            
            // Create bursts at various positions across the viewport
            var positions = [
                // Center
                { x: viewportWidth * 0.5, y: viewportHeight * 0.5 },
                // Top left quadrant
                { x: viewportWidth * 0.25, y: viewportHeight * 0.3 },
                // Top right quadrant
                { x: viewportWidth * 0.75, y: viewportHeight * 0.3 },
                // Bottom left quadrant
                { x: viewportWidth * 0.25, y: viewportHeight * 0.7 },
                // Bottom right quadrant
                { x: viewportWidth * 0.75, y: viewportHeight * 0.7 },
                // Random positions
                { x: Math.random() * viewportWidth, y: Math.random() * viewportHeight * 0.7 },
                { x: Math.random() * viewportWidth, y: Math.random() * viewportHeight * 0.7 },
                { x: Math.random() * viewportWidth, y: Math.random() * viewportHeight * 0.7 }
            ];
            
            // Select position based on index
            var pos = positions[index % positions.length];
            createBurst(pos.x, pos.y);
            
            // Schedule next burst
            setTimeout(function() {
                createInitialBursts(index + 1);
            }, 300); // Reduced delay between bursts for faster startup
        }
        
        // Start the initial burst sequence after a short delay
        setTimeout(function() {
            createInitialBursts(0);
        }, 800);
    });
</script>